spring:
  application:
    name: schoolManager
    
#--------------------------
# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
#     url: jdbc:mysql://47.104.88.31:3306/schcool_management?useUnicode=true&amp;characterEncoding=utf-8
# username: root
#    password: abcde12345
  datasource: 
    url: jdbc:mysql://127.0.0.1:3306/schcool_management_back?useUnicode=true&amp;characterEncoding=utf-8
    username: root
    password: root
    driverClassName: com.mysql.jdbc.Driver
     
    type: com.alibaba.druid.pool.DruidDataSource
    initialSize: 5
    minIdle: 1
    maxActive: 50
# 配置获取连接等待超时的时间
    maxWait: 60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 300000
    validationQuery: SELECT 1 FROM DUAL
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
# 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: false
    maxPoolPreparedStatementPerConnectionSize: 20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters: stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
#    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
    useGlobalDataSourceStat: true

    
server:
  port: 8951
  context-path: /schoolManager
  
  
   
eureka:
  client: 
    healthcheck:
      enabled:true
    service-url:
      defaultZone: http://user:password123@www.renxl.club:10020/eureka
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.cloud.client.ipAddress}:${spring.application.instance_id:${server.port}}   
    lease-renewal-interval-in-seconds: 5      # 心跳时间，即服务续约间隔时间（缺省为30s）
    lease-expiration-duration-in-seconds: 10  # 发呆时间，即服务续约到期时间（缺省为90s）





# --------------------------- mybatis start -------------------------
#
mybatis:
  mapperLocations: classpath*:club.renxl.www.management.school.user.dao/*.xml
  typeAliasesPackage: club.renxl.www.management.school.user.dao.domain
  #pagehelper分00页插件配置
pagehelper:
  helperDialect: mysql
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql
# --------------------------- mybatis end ---------------------------

# 文件上传设置    
multipart:
  maxFileSize: 10Mb
  maxRequestSize: 100Mb


























 
#
#目前系统的所有接口都是非公开接口，当系统发布公开接口时，需要考虑系统的安全性设计
#
#
#1Token授权机制：用户使用用户名密码登录后服务器给客户端返回一个Token（通常是UUID），并将Token-UserId以键值对的形式存放在缓存服务器中。服务端接收到请求后进行Token验证，如果Token不存在，说明请求无效。Token是客户端访问服务端的凭证。
#
#2时间戳超时机制：用户每次请求都带上当前时间的时间戳timestamp，服务端接收到timestamp后跟当前时间进行比对，如果时间差大于一定时间（比如5分钟），则认为该请求失效。时间戳超时机制是防御DOS攻击的有效手段。
#
#3签名机制：将 Token 和 时间戳 加上其他请求参数再用MD5或SHA-1算法（可根据情况加点盐）加密，加密后的数据就是本次请求的签名sign，服务端接收到请求后以同样的算法得到签名，并跟当前的签名进行比对，如果不一样，说明参数被更改过，直接返回错误标识。签名机制保证了数据不会被篡改。
#
#4拒绝重复调用（非必须）：客户端第一次访问时，将签名sign存放到缓存服务器中，超时时间设定为跟时间戳的超时时间一致，二者时间一致可以保证无论在timestamp限定时间内还是外 URL都只能访问一次。如果有人使用同一个URL再次访问，如果发现缓存服务器中已经存在了本次签名，则拒绝服务。如果在缓存中的签名失效的情况下，有人使用同一个URL再次访问，则会被时间戳超时机制拦截。这就是为什么要求时间戳的超时时间要设定为跟时间戳的超时时间一致。拒绝重复调用机制确保URL被别人截获了也无法使用（如抓取数据）。
#
#
# app调用api接口的安全性设计
# 后期开发app时需要考虑
#
